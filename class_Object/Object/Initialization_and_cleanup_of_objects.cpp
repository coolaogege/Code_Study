/* ### 4.2 对象的初始化和清理

*  生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全
*  C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。

#### 4.2.1 构造函数和析构函数

对象的**初始化和清理**也是两个非常重要的安全问题

​	一个对象或者变量没有初始状态，对其使用后果是未知

​	同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题



c++利用了**构造函数**和**析构函数**解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。

对象的初始化和清理工作是编译器强制要我们做的事情，因此如果**我们不提供构造和析构，编译器会提供**

**编译器提供的构造函数和析构函数是空实现。**


* 构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。
* 析构函数：主要作用在于对象**销毁前**系统自动调用，执行一些清理工作。



**构造函数语法：**`类名(){}`

1. 构造函数，没有返回值也不写void
2. 函数名称与类名相同
3. 构造函数可以有参数，因此可以发生重载
4. 程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次



**析构函数语法：** `~类名(){}`

1. 析构函数，没有返回值也不写void
2. 函数名称与类名相同,在名称前加上符号  ~
3. 析构函数不可以有参数，因此不可以发生重载
4. 程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次 */


#include <iostream>

using namespace std;

class Person
{
public:
	//构造函数   -- 没有返回值 也不用写void    函数名称与类名相同  可以有参数，因此可以发生重载
	Person()
	{
		cout << "Person--Constructor" << endl;
	}
	//析构函数   -- 没有返回值 也不用写void    ~ 函数名称与类名相同  没有参数，不可以发生重载
	~Person()
	{
		cout << "Person--Destructor" << endl;
	}

};

// 构造和析构 是必须有的实现 ， 如果我们不自己提供 ， 编译器会提供一个 空实现 的构造和析构
// 在 栈上的数据  执行完该函数之后 会释放这个对象
void test01()
{
	Person p; // 创建一个对象
}

int main() {

	// 虽然没有调用 Person()  ---- 但是会被系统自动调用一次
	test01(); // Person--Constructor  Person--Destructor

    Person p; // Person--Constructor  // 在这里 因为后面有暂停   并且还是在main()函数里  最后才释放

	system("pause");

	return 0;
}